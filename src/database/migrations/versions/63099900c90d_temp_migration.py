"""temp_migration

Revision ID: 63099900c90d
Revises: 7897fddd0543
Create Date: 2025-06-05 15:10:05.322831

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '63099900c90d'
down_revision: Union[str, None] = '7897fddd0543'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('certifications',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('directors',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('stars',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('movie_directors',
    sa.Column('movie_id', sa.Integer(), nullable=False),
    sa.Column('director_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['director_id'], ['directors.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['movie_id'], ['movies.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('movie_id', 'director_id')
    )
    op.create_table('movie_genres',
    sa.Column('movie_id', sa.Integer(), nullable=False),
    sa.Column('genre_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['genre_id'], ['genres.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['movie_id'], ['movies.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('movie_id', 'genre_id')
    )
    op.create_table('movie_stars',
    sa.Column('movie_id', sa.Integer(), nullable=False),
    sa.Column('star_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['movie_id'], ['movies.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['star_id'], ['stars.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('movie_id', 'star_id')
    )
    op.drop_table('actors')
    op.drop_table('movies_languages')
    op.drop_table('movies_genres')
    op.drop_table('countries')
    op.drop_table('actors_movies')
    op.drop_table('languages')
    op.alter_column('genres', 'name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=False)
    op.add_column('movies', sa.Column('uuid_movie', sa.UUID(), nullable=False))
    op.add_column('movies', sa.Column('year', sa.Integer(), nullable=False))
    op.add_column('movies', sa.Column('time', sa.Integer(), nullable=False))
    op.add_column('movies', sa.Column('imdb', sa.Float(), nullable=True))
    op.add_column('movies', sa.Column('votes', sa.Integer(), nullable=True))
    op.add_column('movies', sa.Column('meta_score', sa.Float(), nullable=True))
    op.add_column('movies', sa.Column('gross', sa.Float(), nullable=True))
    op.add_column('movies', sa.Column('descriptions', sa.Text(), nullable=False))
    op.add_column('movies', sa.Column('price', sa.DECIMAL(precision=10, scale=2), nullable=False))
    op.add_column('movies', sa.Column('certification_id', sa.Integer(), nullable=False))
    op.drop_constraint(op.f('unique_movie_constraint'), 'movies', type_='unique')
    op.create_unique_constraint(None, 'movies', ['uuid_movie'])
    op.create_unique_constraint(None, 'movies', ['name', 'year', 'time'])
    op.drop_constraint(op.f('movies_country_id_fkey'), 'movies', type_='foreignkey')
    op.create_foreign_key(None, 'movies', 'certifications', ['certification_id'], ['id'])
    op.drop_column('movies', 'budget')
    op.drop_column('movies', 'score')
    op.drop_column('movies', 'date')
    op.drop_column('movies', 'status')
    op.drop_column('movies', 'revenue')
    op.drop_column('movies', 'overview')
    op.drop_column('movies', 'country_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('movies', sa.Column('country_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('movies', sa.Column('overview', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('movies', sa.Column('revenue', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('movies', sa.Column('status', postgresql.ENUM('RELEASED', 'POST_PRODUCTION', 'IN_PRODUCTION', name='moviestatusenum'), autoincrement=False, nullable=False))
    op.add_column('movies', sa.Column('date', sa.DATE(), autoincrement=False, nullable=False))
    op.add_column('movies', sa.Column('score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('movies', sa.Column('budget', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'movies', type_='foreignkey')
    op.create_foreign_key(op.f('movies_country_id_fkey'), 'movies', 'countries', ['country_id'], ['id'])
    op.drop_constraint(None, 'movies', type_='unique')
    op.drop_constraint(None, 'movies', type_='unique')
    op.create_unique_constraint(op.f('unique_movie_constraint'), 'movies', ['name', 'date'], postgresql_nulls_not_distinct=False)
    op.drop_column('movies', 'certification_id')
    op.drop_column('movies', 'price')
    op.drop_column('movies', 'descriptions')
    op.drop_column('movies', 'gross')
    op.drop_column('movies', 'meta_score')
    op.drop_column('movies', 'votes')
    op.drop_column('movies', 'imdb')
    op.drop_column('movies', 'time')
    op.drop_column('movies', 'year')
    op.drop_column('movies', 'uuid_movie')
    op.alter_column('genres', 'name',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.create_table('languages',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('languages_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='languages_pkey'),
    sa.UniqueConstraint('name', name='languages_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('actors_movies',
    sa.Column('movie_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('actor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['actor_id'], ['actors.id'], name=op.f('actors_movies_actor_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['movie_id'], ['movies.id'], name=op.f('actors_movies_movie_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('movie_id', 'actor_id', name=op.f('actors_movies_pkey'))
    )
    op.create_table('countries',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('countries_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('code', sa.VARCHAR(length=3), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='countries_pkey'),
    sa.UniqueConstraint('code', name='countries_code_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('movies_genres',
    sa.Column('movie_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('genre_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['genre_id'], ['genres.id'], name=op.f('movies_genres_genre_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['movie_id'], ['movies.id'], name=op.f('movies_genres_movie_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('movie_id', 'genre_id', name=op.f('movies_genres_pkey'))
    )
    op.create_table('movies_languages',
    sa.Column('movie_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('language_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['language_id'], ['languages.id'], name=op.f('movies_languages_language_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['movie_id'], ['movies.id'], name=op.f('movies_languages_movie_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('movie_id', 'language_id', name=op.f('movies_languages_pkey'))
    )
    op.create_table('actors',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('actors_pkey')),
    sa.UniqueConstraint('name', name=op.f('actors_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.drop_table('movie_stars')
    op.drop_table('movie_genres')
    op.drop_table('movie_directors')
    op.drop_table('stars')
    op.drop_table('directors')
    op.drop_table('certifications')
    # ### end Alembic commands ###
