services:
  db:
    image: postgres:latest
    container_name: postgres_online_cinema
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    #      - postgres_online_cinema_data:/var/lib/postgresql/data/
    networks:
      - online_cinema_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h 127.0.0.1 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin_online_cinema
    ports:
      - "3333:80"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - pgadmin_online_cinema_data:/var/lib/pgadmin
    networks:
      - online_cinema_network

  web:
    restart: always
    build: .
    container_name: backend_online_cinema
    command: [ "/bin/bash", "/commands/run_web_server_prod.sh" ]
    env_file:
      - .env
    environment:
      - LOG_LEVEL=debug
      - PYTHONPATH=/usr/src/fastapi
      - WATCHFILES_FORCE_POLLING=true
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./src:/usr/src/fastapi
    networks:
      - online_cinema_network

#  stripe_cli:
#    image: stripe/stripe-cli
#    container_name: stripe_cli_online_cinema
#    command: listen --forward-to web:8000/api/v1/payments/webhook
#    env_file:
#      - .env
#    depends_on:
#      web:
#        condition: service_started
#    networks:
#      - online_cinema_network

  migrator:
    build: .
    container_name: alembic_migrator_online_cinema
    command: ["/bin/bash", "/commands/run_migration.sh"]
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./src:/usr/src/fastapi
    env_file:
      - .env
    environment:
      - PYTHONPATH=/usr/src/fastapi
    networks:
      - online_cinema_network

  mailhog:
    restart: always
    build:
      context: .
      dockerfile: ./docker/mailhog/Dockerfile
    container_name: mailhog_online_cinema
    command: ["/bin/bash", "-c", "/commands/setup_mailhog_auth.sh && ~/go/bin/MailHog"]
    ports:
      - "8025:8025"
      - "1025:1025"
    env_file:
      - .env
    environment:
      MH_AUTH_FILE: /mailhog.auth
    networks:
      - online_cinema_network

  nginx:
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    container_name: nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
      - "5513:5513"
      - "5514:5514"
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - web
      - flower
      -
    env_file:
      - ./docker/nginx/.env
    networks:
      - online_cinema_network

    # Cache Service
  redis:
    image: redis:latest
    container_name: redis_online_cinema
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - online_cinema_network

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: online_cinema_scheduler
    command: celery -A scheduler.celery_app worker --loglevel=info
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: on-failure
    networks:
      - online_cinema_network

  # Periodic tasks
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: online_cinema_scheduler_beat
    command: celery -A scheduler.celery_app beat --loglevel=info -s /var/run/celerybeat-schedule
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: on-failure
    networks:
      - online_cinema_network

  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: flower_online_cinema
    command: celery -A scheduler.celery_app flower --address=0.0.0.0 --url-prefix=/flower
    ports:
      - "5555:5555"
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      celery:
        condition: service_started
    restart: on-failure
    networks:
      - online_cinema_network

  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight_online_cinema
    ports:
      - "5540:5540"
    depends_on:
      - redis
    env_file:
      - .env
    restart: always
    networks:
      - online_cinema_network

volumes:
  #  postgres_online_cinema_data:
  #    driver: local
  pgadmin_online_cinema_data:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local

networks:
  online_cinema_network:
    driver: bridge
