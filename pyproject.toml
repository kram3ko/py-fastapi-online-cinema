[tool.poetry]
name = "src"
version = "0.1.0"
description = "Slow-api Team Project"
authors = [
    "Vinohradov Volodymyr <your_email@example.com>",
    "Anollinna <your_email@example.com>",
    "HappyDen08 <your_email@example.com>",
    "BronkstoneBro <your_email@example.com>",
    "cemen2009 <your_email@example.com>"
]

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "^0.115.6"
sqlalchemy = "^2.0.36"
pytest = "^8.3.4"
pydantic-settings = "^2.7.0"
pandas = "^2.2.3"
tqdm = "^4.67.1"
uvicorn = "^0.34.0"
httpx = "^0.28.1"
pytest-env = "^1.1.5"
flake8 = "^7.1.1"
psycopg2-binary = "^2.9.10"
alembic = "^1.14.0"
passlib = { extras = ["bcrypt"], version = "^1.7.4" }
python-jose = { extras = ["cryptography"], version = "^3.3.0" }
email-validator = "^2.2.0"
bcrypt = "4.0.1"
jinja2 = "^3.1.5"
pytest-order = "^1.3.0"
validators = "^0.34.0"
botocore = "^1.35.99"
pillow = "^11.1.0"
python-multipart = "^0.0.20"
aiosmtplib = "^4.0.0"
asyncpg = "^0.30.0"
aiosqlite = "^0.21.0"
aioboto3 = "^13.4.0"
pytest-asyncio = "^0.25.3"
gunicorn = "^23.0.0"
ruff = "^0.11.12"
fastapi-pagination = "^0.13.1"
celery = { extras = ["redis"], version = "^5.5.3" }
flower = "^2.0.1"
mypy = "^1.16.0"
stripe = "^7.11.0"
dropbox = "^12.0.2"



[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
ignore_missing_imports = true
explicit_package_bases = true
namespace_packages = true


[tool.ruff]
# excludes
exclude = ["tests", "migrations", ".venv"]
# max string length
line-length = 119

[tool.ruff.lint]
# Linter Settings

# E — pycodestyle (Style errors, e.g. spacing and indentation issues)
# F — pyflakes (Errors such as unused variables, undefined names, or imports)
# W — pycodestyle (Style warnings)
# N — PEP8 Naming (Incorrect naming conventions for variables, classes, functions)
# ANN — flake8-annotations (Issues with missing or incorrect type annotations)
# UP — pyupgrade (Suggestions for modernizing code using newer Python features)
# I — isort (Import sorting issues)
# Q — flake8-quotes (Quote style checks – e.g. enforcing single or double quotes)
# PL — Pylint (Stylistic issues like code duplication, PEP8 violations)
# SIM — flake8-simplify (Simplification suggestions, e.g. redundant ifs or code)
# ARG — flake8-unused-arguments (Checks for unused function arguments)

preview = true
ignore = [
    "E203",
    "E266",
    "ANN001",
    "ANN002",
    "ANN003",
    "ANN401",
    "N807",
    "N818",
    "F401",
    "PLR2004",
    "ANN204",
    "PLR0913",
    "ARG001",
    "ARG003",
    "PLW1508",
    "N802",
    "PLR0917",
    "PLR6301",
    "PLC2801",
    "PLC0415",
    "F821"
]
select = ["E", "F", "W", "N", "ANN", "UP", "I", "Q", "PL", "SIM", "ARG"]

[tool.ruff.format]
exclude = ["tests", "migrations", ".venv"]
quote-style = "double"  # code qoute style (using double qoutes)
